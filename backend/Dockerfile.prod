# Production Dockerfile for Django Backend
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    curl \
    docker.io \
    libxml2-dev \
    libxmlsec1-dev \
    libxmlsec1-openssl \
    pkg-config \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create app user and add to docker group for Docker socket access
RUN adduser --disabled-password --gecos '' appuser \
    && usermod -aG docker appuser

# Set work directory
WORKDIR /app

# Upgrade pip and install wheel
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements files
COPY requirements.txt requirements.prod.txt /app/

# Install all production requirements
RUN pip install --no-cache-dir -r requirements.prod.txt

# Copy project
COPY . /app/

# Copy entrypoint script
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Create media directories and set permissions
RUN mkdir -p /app/media/simulation_files \
    && mkdir -p /app/media/simulation_results \
    && mkdir -p /app/logs \
    && mkdir -p /app/staticfiles \
    && chmod -R 777 /app/logs /app/media /app/staticfiles \
    && chown -R appuser:appuser /app

# Switch to app user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Use entrypoint script
ENTRYPOINT ["/docker-entrypoint.sh"]

# Start gunicorn server
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--worker-class", "gevent", "config.wsgi:application"]