# Production Dockerfile for Django Backend
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies including GDAL for dtcc
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    curl \
    docker.io \
    libxml2-dev \
    libxmlsec1-dev \
    libxmlsec1-openssl \
    xmlsec1 \
    pkg-config \
    git \
    gdal-bin \
    libgdal-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app user and add to docker group for Docker socket access
RUN adduser --disabled-password --gecos '' appuser \
    && usermod -aG docker appuser

# Set work directory
WORKDIR /app

# Upgrade pip and install wheel
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements files
COPY backend/requirements.txt backend/requirements.prod.txt /app/

# Install all production requirements
RUN pip install --no-cache-dir -r requirements.prod.txt

# Copy VERSION file from project root
COPY VERSION /app/VERSION

# Copy project
COPY backend/ /app/

# Explicitly copy static/images directory (in case .dockerignore excluded it)
COPY backend/static/images/ /app/static/images/

# Copy SAML certificates
COPY backend/saml_certs/ /app/saml_certs/
RUN chmod 600 /app/saml_certs/sp_private_key.pem && \
    chmod 644 /app/saml_certs/sp_certificate.pem

# Copy Chalmers logos to media directory for serving
# Frontend references these at /media/ URLs, and they're in our static/images
RUN mkdir -p /app/media && \
    if [ -f /app/static/images/chalmers_logo_light_theme.png ]; then \
        cp /app/static/images/chalmers_logo_light_theme.png /app/media/; \
    fi && \
    if [ -f /app/static/images/chalmers_logo_dark_theme.png ]; then \
        cp /app/static/images/chalmers_logo_dark_theme.png /app/media/; \
    fi

# Copy entrypoint script
COPY backend/docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Create media directories and set permissions
RUN mkdir -p /app/media/simulation_files \
    && mkdir -p /app/media/simulation_results \
    && mkdir -p /app/logs \
    && mkdir -p /app/staticfiles \
    && chmod -R 777 /app/logs /app/media /app/staticfiles \
    && chown -R appuser:appuser /app

# Switch to app user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Use entrypoint script
ENTRYPOINT ["/docker-entrypoint.sh"]

# Start Daphne ASGI server (supports WebSockets)
CMD ["daphne", "-b", "0.0.0.0", "-p", "8000", "config.asgi:application"]