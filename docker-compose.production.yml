# ============================================================================
# EPSM Production Docker Compose - STREAMLINED VERSION
# ============================================================================
# Single database architecture matching development setup
# - Builds from source (no remote cache confusion)
# - Uses .env.production for all configuration
# - Single PostgreSQL instance with multiple databases (epsm_db, epsm_materials)
# - Superuser created automatically via entrypoint script
# - Always builds fresh (--no-cache recommended)
# - No version confusion or stale builds
# ============================================================================
# Usage:
#   docker-compose -f docker-compose.production.yml up -d --build --force-recreate
# ============================================================================

services:
  # ==========================================================================
  # PostgreSQL Database (Single Database)
  # ==========================================================================
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: epsm_database_prod
    image: epsm-database:${VERSION:-latest}
    environment:
      POSTGRES_DB: ${DB_NAME:-epsm_db}
      POSTGRES_USER: ${DB_USER:-epsm_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-epsm_secure_password}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"  # Only localhost access
    networks:
      - epsm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-epsm_user} -d ${DB_NAME:-epsm_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # ==========================================================================
  # Redis Cache & Message Broker
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: epsm_redis_prod
    volumes:
      - redis_data_prod:/data
    networks:
      - epsm_network
    command: sh -c "if [ -n \"${REDIS_PASSWORD}\" ]; then redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}; else redis-server --appendonly yes; fi"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==========================================================================
  # Django Backend
  # ==========================================================================
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
      args:
        VERSION: ${VERSION:-latest}
    container_name: epsm_backend_prod
    image: epsm-backend:${VERSION:-latest}
    environment:
      # Django Core
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-config.settings}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - VERSION=${VERSION}
      
      # Database (Single Database)
      - DB_NAME=${DB_NAME:-epsm_db}
      - DB_USER=${DB_USER:-epsm_user}
      - DB_PASSWORD=${DB_PASSWORD:-epsm_secure_password}
      - DB_HOST=${DB_HOST:-database}
      - DB_PORT=${DB_PORT:-5432}
      
      # Redis & Celery
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      
      # EnergyPlus Simulation
      - ENERGYPLUS_DOCKER_IMAGE=${ENERGYPLUS_DOCKER_IMAGE:-nrel/energyplus:23.2.0}
      - SIMULATION_TIMEOUT=${SIMULATION_TIMEOUT:-600}
      
      # Superuser Creation
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin@chalmers.se}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@chalmers.se}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      
      # SAML Authentication (Optional)
      - SAML_IDP_METADATA_URL=${SAML_IDP_METADATA_URL:-}
      
      # CORS
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      
      # Docker
      - DOCKER_GID=${DOCKER_GID}
      - HOST_MEDIA_ROOT=${HOST_MEDIA_ROOT:-/var/lib/docker/volumes/epsm_media_data_prod/_data}
    volumes:
      - media_data_prod:/app/media
      - static_data_prod:/app/staticfiles
      - logs_prod:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt:/host-opt:ro  # For disk monitoring
    expose:
      - "8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================================================
  # Celery Worker
  # ==========================================================================
  celery_worker:
    image: epsm-backend:${VERSION:-latest}
    container_name: epsm_celery_worker_prod
    command: celery -A config worker --loglevel=info --concurrency=4
    environment:
      # Django Core
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-config.settings}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      
      # Database (Single Database)
      - DB_NAME=${DB_NAME:-epsm_db}
      - DB_USER=${DB_USER:-epsm_user}
      - DB_PASSWORD=${DB_PASSWORD:-epsm_secure_password}
      - DB_HOST=${DB_HOST:-database}
      - DB_PORT=${DB_PORT:-5432}
      
      # Redis & Celery
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      
      # EnergyPlus Simulation
      - ENERGYPLUS_DOCKER_IMAGE=${ENERGYPLUS_DOCKER_IMAGE:-nrel/energyplus:23.2.0}
      - SIMULATION_TIMEOUT=${SIMULATION_TIMEOUT:-600}
      
      # Docker
      - DOCKER_GID=${DOCKER_GID}
      - HOST_MEDIA_ROOT=${HOST_MEDIA_ROOT:-/var/lib/docker/volumes/epsm_media_data_prod/_data}
    volumes:
      - media_data_prod:/app/media
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping -d celery@$$HOSTNAME || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================================================
  # Celery Beat (Scheduler)
  # ==========================================================================
  celery_beat:
    image: epsm-backend:${VERSION:-latest}
    container_name: epsm_celery_beat_prod
    command: celery -A config beat --loglevel=info
    environment:
      # Django Core
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-config.settings}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      
      # Database (Single Database)
      - DB_NAME=${DB_NAME:-epsm_db}
      - DB_USER=${DB_USER:-epsm_user}
      - DB_PASSWORD=${DB_PASSWORD:-epsm_secure_password}
      - DB_HOST=${DB_HOST:-database}
      - DB_PORT=${DB_PORT:-5432}
      
      # Redis & Celery
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
    volumes:
      - media_data_prod:/app/media
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/celerybeat-schedule || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================================================
  # React Frontend
  # ==========================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VERSION: ${VERSION:-latest}
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
        VITE_WS_URL: ${VITE_WS_URL}
    container_name: epsm_frontend_prod
    image: epsm-frontend:${VERSION:-latest}
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - epsm_network
    restart: unless-stopped

  # ==========================================================================
  # Nginx Reverse Proxy
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: epsm_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_data_prod:/app/staticfiles:ro
      - media_data_prod:/app/media:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # EnergyPlus (Optional - ensures image is available)
  # ==========================================================================
  energyplus:
    image: ${ENERGYPLUS_DOCKER_IMAGE}
    container_name: epsm_energyplus_prod
    command: /bin/true
    restart: "no"
    networks:
      - epsm_network
    profiles:
      - tools

# ============================================================================
# Networks
# ============================================================================
networks:
  epsm_network:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  media_data_prod:
    driver: local
  static_data_prod:
    driver: local
  logs_prod:
    driver: local
