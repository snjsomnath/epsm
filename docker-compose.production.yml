# Production Docker Compose Configuration (GitHub Container Registry)
# 
# This file uses pre-built Docker images from GitHub Container Registry (ghcr.io)
# Use this for CI/CD deployments with automated image building.
#
# For Chalmers VM deployment, use docker-compose.prod.yml instead (builds from source)
# See DOCKER_COMPOSE_STRATEGY.md for details.
#
services:
  database:
    image: postgres:15
    container_name: epsm_database_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-epsm_db}
      POSTGRES_USER: ${POSTGRES_USER:-epsm_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-epsm_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: epsm_redis_prod
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    image: ghcr.io/snjsomnath/epsm-backend:${VERSION:-latest}
    container_name: epsm_backend_prod
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.production
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DB_NAME: ${POSTGRES_DB:-epsm_db}
      DB_USER: ${POSTGRES_USER:-epsm_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: database
      MATERIALS_DB_NAME: epsm_materials
      MATERIALS_DB_USER: ${POSTGRES_USER:-epsm_user}
      MATERIALS_DB_PASSWORD: ${POSTGRES_PASSWORD}
      MATERIALS_DB_HOST: database
      RESULTS_DB_NAME: "${RESULTS_DB_NAME:-epsm_db}"
      RESULTS_DB_USER: "${RESULTS_DB_USER:-epsm_user}"
      RESULTS_DB_PASSWORD: "${RESULTS_DB_PASSWORD:-epsm_secure_password}"
      RESULTS_DB_HOST: "${RESULTS_DB_HOST:-database}"
      RESULTS_DB_PORT: "${RESULTS_DB_PORT:-5432}"
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      ALLOWED_HOSTS: epsm.chalmers.se,www.epsm.chalmers.se,epsm.ita.chalmers.se,www.epsm.ita.chalmers.se,localhost,backend
      CORS_ALLOWED_ORIGINS: "https://epsm.chalmers.se"
      SAML_IDP_METADATA_URL: ${SAML_IDP_METADATA_URL}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.chalmers.se}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      SENTRY_DSN: ${SENTRY_DSN:-}
    volumes:
      - media_data_prod:/app/media
      - static_data_prod:/app/staticfiles
      - logs_prod:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - epsm_network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery-worker:
    image: ghcr.io/snjsomnath/epsm-backend:${VERSION:-latest}
    container_name: epsm_celery_worker_prod
    command: celery -A config worker --loglevel=info
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.production
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DB_NAME: ${POSTGRES_DB:-epsm_db}
      DB_USER: ${POSTGRES_USER:-epsm_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: database
      MATERIALS_DB_NAME: epsm_materials
      MATERIALS_DB_USER: ${POSTGRES_USER:-epsm_user}
      MATERIALS_DB_PASSWORD: ${POSTGRES_PASSWORD}
      MATERIALS_DB_HOST: database
      RESULTS_DB_NAME: "${RESULTS_DB_NAME:-epsm_db}"
      RESULTS_DB_USER: "${RESULTS_DB_USER:-epsm_user}"
      RESULTS_DB_PASSWORD: "${RESULTS_DB_PASSWORD:-epsm_secure_password}"
      RESULTS_DB_HOST: "${RESULTS_DB_HOST:-database}"
      RESULTS_DB_PORT: "${RESULTS_DB_PORT:-5432}"
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    volumes:
      - media_data_prod:/app/media
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - epsm_network
    depends_on:
      - database
      - redis
    restart: unless-stopped

  celery-beat:
    image: ghcr.io/snjsomnath/epsm-backend:${VERSION:-latest}
    container_name: epsm_celery_beat_prod
    command: celery -A config beat --loglevel=info
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.production
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DB_NAME: ${POSTGRES_DB:-epsm_db}
      DB_USER: ${POSTGRES_USER:-epsm_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: database
      MATERIALS_DB_NAME: epsm_materials
      MATERIALS_DB_USER: ${POSTGRES_USER:-epsm_user}
      MATERIALS_DB_PASSWORD: ${POSTGRES_PASSWORD}
      MATERIALS_DB_HOST: database
      RESULTS_DB_NAME: "${RESULTS_DB_NAME:-epsm_db}"
      RESULTS_DB_USER: "${RESULTS_DB_USER:-epsm_user}"
      RESULTS_DB_PASSWORD: "${RESULTS_DB_PASSWORD:-epsm_secure_password}"
      RESULTS_DB_HOST: "${RESULTS_DB_HOST:-database}"
      RESULTS_DB_PORT: "${RESULTS_DB_PORT:-5432}"
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    volumes:
      - media_data_prod:/app/media
    networks:
      - epsm_network
    depends_on:
      - database
      - redis
    restart: unless-stopped

  frontend:
    image: ghcr.io/snjsomnath/epsm-frontend:${VERSION:-latest}
    container_name: epsm_frontend_prod
    networks:
      - epsm_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: epsm_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_data_prod:/app/staticfiles:ro
      - media_data_prod:/app/media:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - epsm_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  epsm_network:
    driver: bridge

volumes:
  postgres_data_prod:
  media_data_prod:
  static_data_prod:
  logs_prod:
