# ============================================================================
# EPSM Production Docker Compose - STREAMLINED VERSION
# ============================================================================
# Single source of truth for production deployment
# - Builds from source (no remote cache confusion)
# - Uses .env.production for all configuration
# - Always builds fresh (--no-cache recommended)
# - No version confusion or stale builds
# ============================================================================
# Usage:
#   docker-compose -f docker-compose.production.yml up -d --build --force-recreate
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # PostgreSQL Database
  # ==========================================================================
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
      no_cache: true  # Always build fresh
    container_name: epsm_database_prod
    image: epsm-database:${VERSION:-latest}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_DB},${MATERIALS_DB_NAME}
      RESULTS_DB_PASSWORD: ${RESULTS_DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/exports:/docker-entrypoint-initdb.d/exports:ro
    ports:
      - "127.0.0.1:5432:5432"  # Only localhost access
    networks:
      - epsm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # ==========================================================================
  # Redis Cache & Message Broker
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: epsm_redis_prod
    volumes:
      - redis_data_prod:/data
    networks:
      - epsm_network
    command: sh -c "if [ -n \"${REDIS_PASSWORD}\" ]; then redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}; else redis-server --appendonly yes; fi"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==========================================================================
  # Django Backend
  # ==========================================================================
  backend:
    build:
      context: .  # Use project root as context
      dockerfile: ./backend/Dockerfile.prod
      no_cache: true  # Always build fresh - no stale builds
      args:
        VERSION: ${VERSION:-latest}
    container_name: epsm_backend_prod
    image: epsm-backend:${VERSION:-latest}
    environment:
      # Django Core
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - VERSION=${VERSION}
      
      # Main Database
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      
      # Materials Database
      - MATERIALS_DB_NAME=${MATERIALS_DB_NAME}
      - MATERIALS_DB_USER=${MATERIALS_DB_USER}
      - MATERIALS_DB_PASSWORD=${MATERIALS_DB_PASSWORD}
      - MATERIALS_DB_HOST=${MATERIALS_DB_HOST}
      - MATERIALS_DB_PORT=${MATERIALS_DB_PORT}
      
      # Results Database
      - RESULTS_DB_NAME=${RESULTS_DB_NAME}
      - RESULTS_DB_USER=${RESULTS_DB_USER}
      - RESULTS_DB_PASSWORD=${RESULTS_DB_PASSWORD}
      - RESULTS_DB_HOST=${RESULTS_DB_HOST}
      - RESULTS_DB_PORT=${RESULTS_DB_PORT}
      
      # Redis & Celery
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      
      # EnergyPlus Simulation
      - ENERGYPLUS_DOCKER_IMAGE=${ENERGYPLUS_DOCKER_IMAGE}
      - SIMULATION_TIMEOUT=${SIMULATION_TIMEOUT}
      
      # SAML Authentication
      - SAML_IDP_METADATA_URL=${SAML_IDP_METADATA_URL}
      
      # CORS
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      
      # Docker
      - DOCKER_GID=${DOCKER_GID}
      - HOST_MEDIA_ROOT=/var/lib/docker/volumes/epsm_media_data_prod/_data
    volumes:
      - media_data_prod:/app/media
      - static_data_prod:/app/staticfiles
      - logs_prod:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt:/host-opt:ro  # For disk monitoring
    expose:
      - "8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Celery Worker
  # ==========================================================================
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      no_cache: true  # Always build fresh
      args:
        VERSION: ${VERSION:-latest}
    container_name: epsm_celery_worker_prod
    image: epsm-backend:${VERSION:-latest}  # Reuse backend image
    command: celery -A config worker --loglevel=info --concurrency=4
    environment:
      # Django Core
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG}
      
      # Main Database
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      
      # Materials Database
      - MATERIALS_DB_NAME=${MATERIALS_DB_NAME}
      - MATERIALS_DB_USER=${MATERIALS_DB_USER}
      - MATERIALS_DB_PASSWORD=${MATERIALS_DB_PASSWORD}
      - MATERIALS_DB_HOST=${MATERIALS_DB_HOST}
      - MATERIALS_DB_PORT=${MATERIALS_DB_PORT}
      
      # Results Database
      - RESULTS_DB_NAME=${RESULTS_DB_NAME}
      - RESULTS_DB_USER=${RESULTS_DB_USER}
      - RESULTS_DB_PASSWORD=${RESULTS_DB_PASSWORD}
      - RESULTS_DB_HOST=${RESULTS_DB_HOST}
      - RESULTS_DB_PORT=${RESULTS_DB_PORT}
      
      # Redis & Celery
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      
      # EnergyPlus Simulation
      - ENERGYPLUS_DOCKER_IMAGE=${ENERGYPLUS_DOCKER_IMAGE}
      - SIMULATION_TIMEOUT=${SIMULATION_TIMEOUT}
      
      # Docker
      - DOCKER_GID=${DOCKER_GID}
      - HOST_MEDIA_ROOT=/var/lib/docker/volumes/epsm_media_data_prod/_data
    volumes:
      - media_data_prod:/app/media
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Celery Beat (Scheduler)
  # ==========================================================================
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      no_cache: true  # Always build fresh
      args:
        VERSION: ${VERSION:-latest}
    container_name: epsm_celery_beat_prod
    image: epsm-backend:${VERSION:-latest}  # Reuse backend image
    command: celery -A config beat --loglevel=info
    environment:
      # Django Core
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG}
      
      # Main Database
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      
      # Materials Database
      - MATERIALS_DB_NAME=${MATERIALS_DB_NAME}
      - MATERIALS_DB_USER=${MATERIALS_DB_USER}
      - MATERIALS_DB_PASSWORD=${MATERIALS_DB_PASSWORD}
      - MATERIALS_DB_HOST=${MATERIALS_DB_HOST}
      - MATERIALS_DB_PORT=${MATERIALS_DB_PORT}
      
      # Results Database
      - RESULTS_DB_NAME=${RESULTS_DB_NAME}
      - RESULTS_DB_USER=${RESULTS_DB_USER}
      - RESULTS_DB_PASSWORD=${RESULTS_DB_PASSWORD}
      - RESULTS_DB_HOST=${RESULTS_DB_HOST}
      - RESULTS_DB_PORT=${RESULTS_DB_PORT}
      
      # Redis & Celery
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      - media_data_prod:/app/media
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "celery.*beat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # React Frontend
  # ==========================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      no_cache: true  # Always build fresh
      args:
        VERSION: ${VERSION:-latest}
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
        VITE_WS_URL: ${VITE_WS_URL}
    container_name: epsm_frontend_prod
    image: epsm-frontend:${VERSION:-latest}
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - epsm_network
    restart: unless-stopped

  # ==========================================================================
  # Nginx Reverse Proxy
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: epsm_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_data_prod:/app/staticfiles:ro
      - media_data_prod:/app/media:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # EnergyPlus (Optional - ensures image is available)
  # ==========================================================================
  energyplus:
    image: ${ENERGYPLUS_DOCKER_IMAGE}
    container_name: epsm_energyplus_prod
    command: /bin/true
    restart: "no"
    networks:
      - epsm_network
    profiles:
      - tools

# ============================================================================
# Networks
# ============================================================================
networks:
  epsm_network:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  media_data_prod:
    driver: local
  static_data_prod:
    driver: local
  logs_prod:
    driver: local
