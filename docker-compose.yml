version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: epsm_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-epsm_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_exports:/docker-entrypoint-initdb.d  # Auto-import existing data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=${DEBUG:-True}
      - DB_NAME=epsm_db
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-epsm_password}
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-your-secret-key-here}
      - ENERGYPLUS_DOCKER_IMAGE=nrel/energyplus:23.2.0
      - SIMULATION_TIMEOUT=600
    volumes:
      - ./backend:/app
      - simulation_files:/app/media/simulation_files
      - simulation_results:/app/media/simulation_results
      - /var/run/docker.sock:/var/run/docker.sock  # Allow Docker-in-Docker for EnergyPlus
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system-resources/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # React Frontend (optional - can be run separately)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./package.json:/app/package.json
      - ./vite.config.ts:/app/vite.config.ts
    ports:
      - "5173:5173"
    depends_on:
      - backend
    command: npm run dev -- --host 0.0.0.0
    profiles:
      - frontend  # Optional service, activate with --profile frontend

volumes:
  postgres_data:
  simulation_files:
  simulation_results:

networks:
  default:
    driver: bridge