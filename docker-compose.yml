# Development Docker Compose Configuration
services:
  # PostgreSQL Database (Single Database)
  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: epsm_database_dev
    environment:
      POSTGRES_DB: epsm_db
      POSTGRES_USER: epsm_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-epsm_secure_password}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - epsm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U epsm_user -d epsm_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: epsm_backend_dev
    environment:
      DEBUG: "True"
      DB_NAME: epsm_db
      DB_USER: epsm_user
      DB_PASSWORD: epsm_secure_password
      DB_HOST: database
      DB_PORT: "5432"
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-secret-key-change-in-production}
      DJANGO_SUPERUSER_USERNAME: epsm@chalmers.se
      DJANGO_SUPERUSER_EMAIL: epsm@chalmers.se
      DJANGO_SUPERUSER_PASSWORD: password
      ENERGYPLUS_DOCKER_IMAGE: nrel/energyplus:23.2.0
      SIMULATION_TIMEOUT: "600"
      CORS_ALLOWED_ORIGINS: "http://localhost:5173,http://frontend:5173,http://127.0.0.1:5173"
    volumes:
      - ./backend:/app
      - ./backend/media/simulation_files:/app/media/simulation_files
      - ./backend/media/simulation_results:/app/media/simulation_results
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: epsm_frontend_dev
    environment:
      # Leave these empty in development so the frontend uses relative
      # URLs and the Vite dev server proxy (or host-local backend) is used.
      - VITE_API_BASE_URL=
      - VITE_WS_URL=
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - epsm_network
    restart: unless-stopped

  # Redis for caching and sessions (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: epsm_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - epsm_network
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery Worker for async task processing
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: epsm_celery_worker_dev
    command: celery -A config worker --loglevel=info --concurrency=4
    environment:
      DEBUG: "True"
      DB_NAME: epsm_db
      DB_USER: epsm_user
      DB_PASSWORD: epsm_secure_password
      DB_HOST: database
      DB_PORT: "5432"
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-secret-key-change-in-production}
      ENERGYPLUS_DOCKER_IMAGE: nrel/energyplus:23.2.0
      SIMULATION_TIMEOUT: "600"
      # HOST_MEDIA_ROOT is optional in dev - only needed for host-level file monitoring
      # HOST_MEDIA_ROOT: "${PWD}/backend/media"
    volumes:
      - ./backend:/app
      - ./backend/media/simulation_files:/app/media/simulation_files
      - ./backend/media/simulation_results:/app/media/simulation_results
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping -d celery@$$HOSTNAME || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Beat for periodic tasks (optional)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: epsm_celery_beat_dev
    command: celery -A config beat --loglevel=info
    environment:
      DEBUG: "True"
      DB_NAME: epsm_db
      DB_USER: epsm_user
      DB_PASSWORD: epsm_secure_password
      DB_HOST: database
      DB_PORT: "5432"
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-dev-secret-key-change-in-production}
    volumes:
      - ./backend:/app
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - epsm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/celerybeat-schedule || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  epsm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16