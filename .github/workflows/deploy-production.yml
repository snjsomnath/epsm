name: Deploy to Production

# ============================================================================
# Streamlined Production Deployment Workflow
# ============================================================================
# This workflow uses a SELF-HOSTED runner on the VM
# - Single source of truth: .env.production
# - Always builds from source (no cache confusion)
# - Forces clean builds with --no-cache
# - No remote image fetching
# ============================================================================

on:
  workflow_dispatch:  # Manual triggering only (recommended for safety)
    inputs:
      skip_migrations:
        description: 'Skip database migrations'
        required: false
        default: 'false'
      skip_seed:
        description: 'Skip database seeding'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: self-hosted  # Uses runner on VM, not GitHub-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate GitHub Secrets
        run: |
          echo "ÔøΩ Validating GitHub Secrets..."
          errors=0
          
          if [ -z "${{ secrets.PROD_DJANGO_SECRET_KEY }}" ]; then
            echo "‚ùå PROD_DJANGO_SECRET_KEY is not set"
            errors=$((errors+1))
          fi
          
          if [ -z "${{ secrets.PROD_DB_PASSWORD }}" ]; then
            echo "‚ùå PROD_DB_PASSWORD is not set"
            errors=$((errors+1))
          fi
          
          if [ -z "${{ secrets.PROD_REDIS_PASSWORD }}" ]; then
            echo "‚ùå PROD_REDIS_PASSWORD is not set"
            errors=$((errors+1))
          fi
          
          if [ $errors -gt 0 ]; then
            echo "‚ùå $errors required secrets are missing!"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are configured"

      - name: Create .env.production from GitHub Secrets
        run: |
          cd /opt/epsm
          echo "üîê Creating .env.production from GitHub Secrets..."
          
          cat > .env.production << 'EOF'
          # Django Core
          DEBUG=False
          DJANGO_SETTINGS_MODULE=config.settings
          DJANGO_SECRET_KEY=${{ secrets.PROD_DJANGO_SECRET_KEY }}
          ALLOWED_HOSTS=epsm.ita.chalmers.se,backend
          CSRF_TRUSTED_ORIGINS=https://epsm.ita.chalmers.se
          
          # Database (Single Database Architecture)
          DB_NAME=epsm_db
          DB_USER=epsm_user
          DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          DB_HOST=database
          DB_PORT=5432
          
          # PostgreSQL Container
          POSTGRES_DB=epsm_db
          POSTGRES_USER=epsm_user
          POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          
          # Redis
          REDIS_HOST=redis
          REDIS_PORT=6379
          REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }}
          REDIS_URL=redis://:${{ secrets.PROD_REDIS_PASSWORD }}@redis:6379/0
          CELERY_BROKER_URL=redis://:${{ secrets.PROD_REDIS_PASSWORD }}@redis:6379/0
          CELERY_RESULT_BACKEND=redis://:${{ secrets.PROD_REDIS_PASSWORD }}@redis:6379/0
          
          # CORS
          CORS_ALLOWED_ORIGINS=https://epsm.ita.chalmers.se
          
          # EnergyPlus
          ENERGYPLUS_DOCKER_IMAGE=nrel/energyplus:23.2.0
          SIMULATION_TIMEOUT=600
          MAX_CONCURRENT_SIMULATIONS=4
          DOCKER_GID=999
          
          # Frontend
          VITE_API_BASE_URL=https://epsm.ita.chalmers.se
          VITE_WS_URL=wss://epsm.ita.chalmers.se/ws
          
          # Application Version
          VERSION=0.2.6
          
          # Docker Compose
          COMPOSE_PROJECT_NAME=epsm_prod
          EOF
          
          chmod 600 .env.production
          echo "‚úÖ .env.production created with secrets from GitHub"

      - name: Load environment variables
        run: |
          cd /opt/epsm
          echo "üîß Loading environment variables..."
          set -a
          source .env.production
          set +a
          echo "‚úÖ Environment variables loaded"

      - name: Stop existing containers
        run: |
          cd /opt/epsm
          echo "üõë Stopping existing containers..."
          docker-compose -f docker-compose.production.yml down || true
          echo "‚úÖ Containers stopped"

      - name: Pull latest code
        run: |
          cd /opt/epsm
          echo "üì• Pulling latest code from main branch..."
          git fetch origin main
          git reset --hard origin/main
          echo "‚úÖ Code updated to latest"

      - name: Pull EnergyPlus image
        run: |
          cd /opt/epsm
          source .env.production
          echo "üì• Pulling EnergyPlus Docker image: ${ENERGYPLUS_DOCKER_IMAGE}"
          docker pull ${ENERGYPLUS_DOCKER_IMAGE}
          echo "‚úÖ EnergyPlus image ready"

      - name: Clean Docker build cache
        run: |
          echo "üßπ Removing Docker build cache to force fresh builds..."
          docker builder prune -af
          echo "‚úÖ Build cache cleared"

      - name: Remove old images
        run: |
          echo "üßπ Removing old EPSM images..."
          docker images | grep epsm | awk '{print $3}' | xargs -r docker rmi -f || true
          echo "‚úÖ Old images removed"

      - name: Build and deploy services
        run: |
          cd /opt/epsm
          
          echo "üöÄ Building services from source (NO CACHE)..."
          echo "üìù Using docker-compose.production.yml"
          
          # Build with explicit no-cache and force-recreate
          docker-compose -f docker-compose.production.yml build \
            --no-cache \
            --pull \
            --progress=plain
          
          echo "‚úÖ Build complete"
          
          echo "üöÄ Starting services..."
          docker-compose -f docker-compose.production.yml up -d --force-recreate
          
          echo "‚úÖ Services started"

      - name: Wait for services
        run: |
          cd /opt/epsm
          echo "‚è≥ Waiting for services to be healthy..."
          
          # Wait for database
          timeout 120 sh -c 'until docker-compose -f docker-compose.production.yml exec -T database pg_isready -U epsm_user; do sleep 2; done'
          echo "‚úÖ Database is ready"
          
          # Wait for backend
          timeout 120 sh -c 'until docker-compose -f docker-compose.production.yml exec -T backend curl -f http://localhost:8000/health/ 2>/dev/null; do sleep 2; done'
          echo "‚úÖ Backend is ready"
          
          # Additional buffer
          echo "‚è≥ Waiting 10 more seconds for full initialization..."
          sleep 10

      - name: Run database migrations
        if: ${{ github.event.inputs.skip_migrations != 'true' }}
        run: |
          cd /opt/epsm
          echo "üìä Running database migrations..."
          docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate --noinput
          echo "‚úÖ Migrations complete"

      - name: Seed database
        if: ${{ github.event.inputs.skip_seed != 'true' }}
        run: |
          cd /opt/epsm
          echo "üå± Seeding database with initial data..."
          
          if [ -f scripts/seed-database.sh ]; then
            bash scripts/seed-database.sh
          else
            echo "‚ö†Ô∏è  Seed script not found, skipping..."
          fi
          
          echo "‚úÖ Database seeding complete"

      - name: Collect static files
        run: |
          cd /opt/epsm
          echo "üìÅ Collecting static files..."
          docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
          echo "‚úÖ Static files collected"

      - name: Clean up Docker system
        run: |
          echo "üßπ Cleaning up Docker system..."
          docker system prune -f --volumes
          echo "‚úÖ Cleanup complete"

      - name: Verify deployment
        run: |
          cd /opt/epsm
          echo "üîç Verifying deployment..."
          
          echo ""
          echo "==================================="
          echo "Container Status:"
          echo "==================================="
          docker-compose -f docker-compose.production.yml ps
          
          echo ""
          echo "==================================="
          echo "Service Health:"
          echo "==================================="
          
          # Check database
          if docker-compose -f docker-compose.production.yml exec -T database pg_isready -U epsm_user > /dev/null 2>&1; then
            echo "‚úÖ Database: HEALTHY"
          else
            echo "‚ùå Database: UNHEALTHY"
          fi
          
          # Check Redis
          if docker-compose -f docker-compose.production.yml exec -T redis redis-cli ping > /dev/null 2>&1; then
            echo "‚úÖ Redis: HEALTHY"
          else
            echo "‚ùå Redis: UNHEALTHY"
          fi
          
          # Check backend
          if docker-compose -f docker-compose.production.yml exec -T backend curl -f http://localhost:8000/health/ > /dev/null 2>&1; then
            echo "‚úÖ Backend: HEALTHY"
          else
            echo "‚ùå Backend: UNHEALTHY"
          fi
          
          # Check Celery worker
          if docker-compose -f docker-compose.production.yml exec -T celery_worker celery -A config inspect ping > /dev/null 2>&1; then
            echo "‚úÖ Celery Worker: HEALTHY"
          else
            echo "‚ùå Celery Worker: UNHEALTHY"
          fi
          
          echo ""
          echo "==================================="
          echo "Deployment Information:"
          echo "==================================="
          echo "Deployed at: $(date)"
          echo "Git commit: $(git rev-parse --short HEAD)"
          echo "Git branch: $(git rev-parse --abbrev-ref HEAD)"
          
          if [ -f VERSION ]; then
            echo "Version: $(cat VERSION)"
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "## üöÄ Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Git commit:** $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
          
          if [ -f VERSION ]; then
            echo "**Version:** $(cat VERSION)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services" >> $GITHUB_STEP_SUMMARY
          echo "- Database: PostgreSQL 15" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: Django + Gunicorn" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: React + Vite" >> $GITHUB_STEP_SUMMARY
          echo "- Workers: Celery" >> $GITHUB_STEP_SUMMARY
          echo "- Cache: Redis" >> $GITHUB_STEP_SUMMARY
          echo "- Proxy: Nginx" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup secrets file
        if: always()
        run: |
          cd /opt/epsm
          if [ -f .env.production ]; then
            rm -f .env.production
            echo "üóëÔ∏è  Cleaned up .env.production (secrets removed from disk)"
          fi
          echo "### Access" >> $GITHUB_STEP_SUMMARY
          echo "üåê **URL:** https://epsm.chalmers.se" >> $GITHUB_STEP_SUMMARY
