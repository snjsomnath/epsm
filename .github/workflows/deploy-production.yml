name: Deploy to Production

# NOTE: This workflow is configured for AUTOMATED deployment using pre-built Docker images
# For INITIAL/MANUAL deployment to Chalmers VM, use docker-compose.prod.yml instead
# See DEPLOYMENT_STEPS.md for manual deployment instructions
# 
# This workflow requires:
# - GitHub Secrets: PROD_HOST, PROD_USER, PROD_SSH_KEY
# - Network access from GitHub runners to production VM
# - Pre-built images in GitHub Container Registry (ghcr.io)
#
# Once manual deployment is successful, you can enable this for automated deployments.

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          missing=0
          if [ -z "${{ secrets.PROD_HOST }}" ]; then
            echo "ERROR: PROD_HOST secret is not set. Set it in repository Settings -> Secrets and variables -> Actions." >&2
            missing=1
          fi
          if [ -z "${{ secrets.PROD_USER }}" ]; then
            echo "ERROR: PROD_USER secret is not set. Set it in repository Settings -> Secrets and variables -> Actions." >&2
            missing=1
          fi
          if [ -z "${{ secrets.PROD_SSH_KEY }}" ]; then
            echo "ERROR: PROD_SSH_KEY secret is not set. Set it in repository Settings -> Secrets and variables -> Actions." >&2
            missing=1
          fi
          if [ "$missing" -ne 0 ]; then
            echo "One or more required secrets are missing. Aborting deployment." >&2
            exit 1
          fi

      - name: Runner network debug
        shell: bash
        run: |
          echo "Runner: $RUNNER_OS / $RUNNER_TEMP"
          echo; echo "Resolve DNS:"
          nslookup ${{ secrets.PROD_HOST }} || host ${{ secrets.PROD_HOST }} || true
          echo; echo "getent hosts ->"
          getent hosts ${{ secrets.PROD_HOST }} || true
          echo; echo "Try TCP connect to port 22 (open/closed) with 5s timeout:"
          timeout 5 bash -c "cat < /dev/tcp/${{ secrets.PROD_HOST }}/22" >/dev/null 2>&1 && echo 'port 22 open' || echo 'port 22 not reachable or timed out'
          echo; echo "Note: if port 22 not reachable, consider self-hosted runner or allow runner IPs in firewall"


      - name: Deploy to Production VM
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/epsm
            git pull origin main
            docker-compose -f docker-compose.production.yml pull
            docker-compose -f docker-compose.production.yml up -d
            docker system prune -f
