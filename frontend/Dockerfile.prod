# Multi-stage Production Dockerfile for React Frontend
FROM node:18-alpine as build

# Build-time configuration for API/WebSocket endpoints
ARG VITE_API_BASE_URL
ARG VITE_WS_URL
ENV VITE_API_BASE_URL=${VITE_API_BASE_URL}
ENV VITE_WS_URL=${VITE_WS_URL}

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies (including devDependencies needed for build)
RUN npm ci

# Copy source code
COPY . .

# Build the application with the injected environment configuration
RUN npm run build

# Ensure media directory exists and copy logos explicitly (backup safety measure)
RUN mkdir -p /app/dist/media && \
    if [ -f /app/public/media/chalmers_logo_light_theme.png ]; then \
        cp /app/public/media/chalmers_logo_light_theme.png /app/dist/media/; \
    fi && \
    if [ -f /app/public/media/chalmers_logo_dark_theme.png ]; then \
        cp /app/public/media/chalmers_logo_dark_theme.png /app/dist/media/; \
    fi

# Production stage with Nginx
FROM nginx:alpine as production

# Copy built assets from build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]